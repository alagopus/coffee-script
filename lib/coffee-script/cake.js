// Generated by CoffeeScript 1.5.0-pre
(function() {
  var CoffeeScript, cakefileDirectory, fatalError, file, fsa0, helpers, missingTask, oparse, options, optparse, printTasks, switches, tasks;

  fsa0 = require("fs-base");

  file = require('file');

  helpers = require('./helpers');

  optparse = require('./optparse');

  CoffeeScript = require('./coffee-script');

  tasks = {};

  options = {};

  switches = [];

  oparse = null;

  helpers.extend(global, {
    task: (function(){ function _task(name, description, action) {
      var _ref, _task;
      if (!action) {
        _ref = [description, action], action = _ref[0], description = _ref[1];
      }
      return tasks[name] = {
        name: name,
        description: description,
        action: action
      };
    }; return _task})(),
    option: (function(){ function _option(letter, flag, description) {
      var _option;
      return switches.push([letter, flag, description]);
    }; return _option})(),
    invoke: (function(){ function _invoke(name) {
      var _invoke;
      if (!tasks[name]) {
        missingTask(name);
      }
      return tasks[name].action(options);
    }; return _invoke})()
  });

  exports.run = (function(){ function _run() {
    var arg, args, _i, _len, _ref, _results, _run;
    global.__originalDirname = file.canonical('.');
    fsa0.changeWorkingDirectory(cakefileDirectory(__originalDirname));
    args = global["arguments"].slice(1);
    CoffeeScript.run(file.read('Cakefile').toString(), {
      filename: 'Cakefile .coffee'
    });
    oparse = new optparse.OptionParser(switches);
    if (!args.length) {
      return printTasks();
    }
    try {
      options = oparse.parse(args);
    } catch (e) {
      return fatalError("" + e);
    }
    _ref = options["arguments"];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      _results.push(invoke(arg));
    }
    return _results;
  }; return _run})();

  printTasks = (function(){ function _printTasks() {
    var cakefilePath, desc, name, spaces, task, _printTasks;
    cakefilePath = file.join(file.relative(__originalDirname, fsa0.workingDirectory()), 'Cakefile');
    system.stdout.print("" + cakefilePath + " defines the following tasks:\n");
    for (name in tasks) {
      task = tasks[name];
      spaces = 20 - name.length;
      spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
      desc = task.description ? "# " + task.description : '';
      system.stdout.print("cake " + name + spaces + " " + desc);
    }
    if (switches.length) {
      return system.stdout.print(oparse.help());
    }
  }; return _printTasks})();

  fatalError = (function(){ function _fatalError(message) {
    var _fatalError;
    system.stderr.print(message + '\n');
    system.stdout.print('To see a list of all tasks/options, run "cake"');
    return os.exit(1);
  }; return _fatalError})();

  missingTask = (function(){ function _missingTask(task) {
    var _missingTask;
    return fatalError("No such task: " + task);
  }; return _missingTask})();

  cakefileDirectory = (function(){ function _cakefileDirectory(dir) {
    var parent, _cakefileDirectory;
    if (file.exists(file.join(dir, 'Cakefile'))) {
      return dir;
    }
    parent = file.resolve(dir, '..');
    if (parent !== dir) {
      return cakefileDirectory(parent);
    }
    throw new Error("Cakefile not found in " + (fsa0.workingDirectory()));
  }; return _cakefileDirectory})();

}).call(this);
