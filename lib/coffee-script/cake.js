// Generated by CoffeeScript 1.5.0-pre
(function() {
  var CoffeeScript, cakefileDirectory, existsSync, fatalError, fs, helpers, missingTask, oparse, options, optparse, path, printTasks, switches, tasks;

  fs = require('fs');

  path = require('path');

  helpers = require('./helpers');

  optparse = require('./optparse');

  CoffeeScript = require('./coffee-script');

  existsSync = fs.existsSync || path.existsSync;

  tasks = {};

  options = {};

  switches = [];

  oparse = null;

  helpers.extend(global, {
    task: (function(){ var _fn = function _11task(name, description, action) {
      var _fn, _ref;
      if (!action) {
        _ref = [description, action], action = _ref[0], description = _ref[1];
      }
      return tasks[name] = {
        name: name,
        description: description,
        action: action
      };
    }; var _12task = null; return _fn})(),
    option: (function(){ var _fn = function _13option(letter, flag, description) {
      var _fn;
      return switches.push([letter, flag, description]);
    }; var _14option = null; return _fn})(),
    invoke: (function(){ var _fn = function _15invoke(name) {
      var _fn;
      if (!tasks[name]) {
        missingTask(name);
      }
      return tasks[name].action(options);
    }; var _16invoke = null; return _fn})()
  });

  exports.run = (function(){ var _fn = function _17run() {
    var arg, args, _fn, _i, _len, _ref, _results;
    global.__originalDirname = fs.realpathSync('.');
    process.chdir(cakefileDirectory(__originalDirname));
    args = process.argv.slice(2);
    CoffeeScript.run(fs.readFileSync('Cakefile').toString(), {
      filename: 'Cakefile'
    });
    oparse = new optparse.OptionParser(switches);
    if (!args.length) {
      return printTasks();
    }
    try {
      options = oparse.parse(args);
    } catch (e) {
      return fatalError("" + e);
    }
    _ref = options["arguments"];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      _results.push(invoke(arg));
    }
    return _results;
  }; var _18run = null; return _fn})();

  printTasks = (function(){ var _fn = function _19printTasks() {
    var cakefilePath, desc, name, relative, spaces, task, _fn;
    relative = path.relative || path.resolve;
    cakefilePath = path.join(relative(__originalDirname, process.cwd()), 'Cakefile');
    console.log("" + cakefilePath + " defines the following tasks:\n");
    for (name in tasks) {
      task = tasks[name];
      spaces = 20 - name.length;
      spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
      desc = task.description ? "# " + task.description : '';
      console.log("cake " + name + spaces + " " + desc);
    }
    if (switches.length) {
      return console.log(oparse.help());
    }
  }; var _20printTasks = null; return _fn})();

  fatalError = (function(){ var _fn = function _21fatalError(message) {
    var _fn;
    console.error(message + '\n');
    console.log('To see a list of all tasks/options, run "cake"');
    return process.exit(1);
  }; var _22fatalError = null; return _fn})();

  missingTask = (function(){ var _fn = function _23missingTask(task) {
    var _fn;
    return fatalError("No such task: " + task);
  }; var _24missingTask = null; return _fn})();

  cakefileDirectory = (function(){ var _fn = function _25cakefileDirectory(dir) {
    var parent, _fn;
    if (existsSync(path.join(dir, 'Cakefile'))) {
      return dir;
    }
    parent = path.normalize(path.join(dir, '..'));
    if (parent !== dir) {
      return cakefileDirectory(parent);
    }
    throw new Error("Cakefile not found in " + (process.cwd()));
  }; var _26cakefileDirectory = null; return _fn})();

}).call(this);
