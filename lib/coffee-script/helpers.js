// Generated by CoffeeScript 1.5.0-pre
(function() {
  var extend, flatten, _ref;

  exports.starts = (function(){ function _starts(string, literal, start) {
    var _starts;
    return literal === string.substr(start, literal.length);
  }; return _starts})();

  exports.ends = (function(){ function _ends(string, literal, back) {
    var len, _ends;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  }; return _ends})();

  exports.compact = (function(){ function _compact(array) {
    var item, _compact, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item) {
        _results.push(item);
      }
    }
    return _results;
  }; return _compact})();

  exports.count = (function(){ function _count(string, substr) {
    var num, pos, _count;
    num = pos = 0;
    if (!substr.length) {
      return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  }; return _count})();

  exports.merge = (function(){ function _merge(options, overrides) {
    var _merge;
    return extend(extend({}, options), overrides);
  }; return _merge})();

  extend = exports.extend = (function(){ function _extend(object, properties) {
    var key, val, _extend;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  }; return _extend})();

  exports.flatten = flatten = (function(){ function _flatten(array) {
    var element, flattened, _flatten, _i, _len;
    flattened = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      element = array[_i];
      if (element instanceof Array) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  }; return _flatten})();

  exports.del = (function(){ function _del(obj, key) {
    var val, _del;
    val = obj[key];
    delete obj[key];
    return val;
  }; return _del})();

  exports.last = (function(){ function _last(array, back) {
    var _last;
    return array[array.length - (back || 0) - 1];
  }; return _last})();

  exports.some = (_ref = Array.prototype.some) != null ? _ref : function(fn) {
    var e, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      e = this[_i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

}).call(this);
