// Generated by CoffeeScript 1.5.0-pre
(function() {
  var ACCESSOR, CoffeeScript, REPL_PROMPT, REPL_PROMPT_CONTINUATION, REPL_PROMPT_MULTILINE, RESERVED, SIMPLEVAR, autocomplete, backlog, completeAttribute, completeVariable, enableColours, error, getCompletions, line, os, repl, run, stdin, stdout,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  stdin = system.stdin;

  stdout = system.stdout;

  CoffeeScript = require('./coffee-script');

  os = require('os');

  RESERVED = require('./lexer').RESERVED;

  REPL_PROMPT = 'coffee> ';

  REPL_PROMPT_MULTILINE = '------> ';

  REPL_PROMPT_CONTINUATION = '......> ';

  enableColours = false;

  error = (function(){ function _error(err) {
    var _error;
    return stdout.write(err.toString() + (err.stack || '') + '\n');
  }; return _error})();

  ACCESSOR = /\s*([\w\.]+)(?:\.(\w*))$/;

  SIMPLEVAR = /(\w+)$/i;

  autocomplete = (function(){ function _autocomplete(text) {
    var _autocomplete;
    return completeAttribute(text) || completeVariable(text) || [[], text];
  }; return _autocomplete})();

  completeAttribute = (function(){ function _completeAttribute(text) {
    var all, candidates, completions, key, match, obj, prefix, _completeAttribute, _i, _len, _ref;
    if (match = text.match(ACCESSOR)) {
      all = match[0], obj = match[1], prefix = match[2];
      try {
        obj = Function('return(' + obj + ')')();
      } catch (e) {
        return;
      }
      if (obj == null) {
        return;
      }
      obj = Object(obj);
      candidates = Object.getOwnPropertyNames(obj);
      while (obj = Object.getPrototypeOf(obj)) {
        _ref = Object.getOwnPropertyNames(obj);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (__indexOf.call(candidates, key) < 0) {
            candidates.push(key);
          }
        }
      }
      completions = getCompletions(prefix, candidates);
      return [completions, prefix];
    }
  }; return _completeAttribute})();

  completeVariable = (function(){ function _completeVariable(text) {
    var candidates, completions, free, key, keywords, r, vars, _completeVariable, _i, _len, _ref;
    free = (_ref = text.match(SIMPLEVAR)) != null ? _ref[1] : void 0;
    if (text === "") {
      free = "";
    }
    if (free != null) {
      vars = Function('return Object.getOwnPropertyNames(Object(this))')();
      keywords = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = RESERVED.length; _i < _len; _i++) {
          r = RESERVED[_i];
          if (r.slice(0, 2) !== '__') {
            _results.push(r);
          }
        }
        return _results;
      })();
      candidates = vars;
      for (_i = 0, _len = keywords.length; _i < _len; _i++) {
        key = keywords[_i];
        if (__indexOf.call(candidates, key) < 0) {
          candidates.push(key);
        }
      }
      completions = getCompletions(free, candidates);
      return [completions, free];
    }
  }; return _completeVariable})();

  getCompletions = (function(){ function _getCompletions(prefix, candidates) {
    var el, _getCompletions, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = candidates.length; _i < _len; _i++) {
      el = candidates[_i];
      if (0 === el.indexOf(prefix)) {
        _results.push(el);
      }
    }
    return _results;
  }; return _getCompletions})();

  backlog = '';

  run = (function(){ function _run(buffer) {
    var code, returnValue, _, _run;
    buffer = buffer.replace(/(^|[\r\n]+)(\s*)##?(?:[^#\r\n][^\r\n]*|)($|[\r\n])/, "$1$2$3");
    buffer = buffer.replace(/[\r\n]+$/, "");
    if (!buffer.toString().trim() && !backlog) {
      repl.prompt();
      return;
    }
    code = backlog += buffer;
    if (code[code.length - 1] === '\\') {
      backlog = "" + backlog.slice(0, -1) + "\n";
      repl.setPrompt(REPL_PROMPT_CONTINUATION);
      repl.prompt();
      return;
    }
    repl.setPrompt(REPL_PROMPT);
    backlog = '';
    try {
      _ = global._;
      returnValue = CoffeeScript["eval"]("_=(" + code + "\n)", {
        filename: 'repl',
        modulename: 'repl'
      });
      if (returnValue === void 0) {
        global._ = _;
      }
      repl.output.write("" + returnValue + "\n");
    } catch (err) {
      error(err);
    }
    return repl.prompt();
  }; return _run})();

  repl = {
    prompt: (function(){ function _prompt() {
      var _prompt;
      this.output.write(this._prompt);
      return this.output.flush();
    }; return _prompt})(),
    setPrompt: (function(){ function _setPrompt(p) {
      var _setPrompt;
      return this._prompt = p;
    }; return _setPrompt})(),
    input: stdin,
    output: stdout,
    on: (function(){ function _on() {}; return _on})()
  };

  repl.setPrompt(REPL_PROMPT);

  repl.prompt();

  while (line = repl.input.readLine()) {
    run(line);
  }

}).call(this);
