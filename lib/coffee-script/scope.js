// Generated by CoffeeScript 1.5.0-pre
(function() {
  var Scope, extend, last, _ref;

  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;

  exports.Scope = Scope = (function() {

    Scope.root = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        Scope.root = this;
      }
    }

    Scope.prototype.add = (function(){ var _fn = function _589add(name, type, immediate) {
      var _fn;
      if (this.shared && !immediate) {
        return this.parent.add(name, type, immediate);
      }
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    }; var _590add = null; return _fn})();

    Scope.prototype.namedMethod = (function(){ var _fn = function _591namedMethod() {
      var _fn;
      if (this.method.name || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    }; var _592namedMethod = null; return _fn})();

    Scope.prototype.find = (function(){ var _fn = function _593find(name) {
      var _fn;
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    }; var _594find = null; return _fn})();

    Scope.prototype.parameter = (function(){ var _fn = function _595parameter(name) {
      var _fn;
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    }; var _596parameter = null; return _fn})();

    Scope.prototype.check = (function(){ var _fn = function _597check(name) {
      var _fn, _ref1;
      return !!(this.type(name) || ((_ref1 = this.parent) != null ? _ref1.check(name) : void 0));
    }; var _598check = null; return _fn})();

    Scope.prototype.temporary = (function(){ var _fn = function _599temporary(name, index) {
      var _fn;
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index - 1 : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    }; var _600temporary = null; return _fn})();

    Scope.prototype.type = (function(){ var _fn = function _601type(name) {
      var v, _fn, _i, _len, _ref1;
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    }; var _602type = null; return _fn})();

    Scope.prototype.freeVariable = (function(){ var _fn = function _603freeVariable(name, reserve) {
      var index, temp, _fn;
      if (reserve == null) {
        reserve = true;
      }
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) {
        this.add(temp, 'var', true);
      }
      return temp;
    }; var _604freeVariable = null; return _fn})();

    Scope.prototype.assign = (function(){ var _fn = function _605assign(name, value) {
      var _fn;
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    }; var _606assign = null; return _fn})();

    Scope.prototype.hasDeclarations = (function(){ var _fn = function _607hasDeclarations() {
      var _fn;
      return !!this.declaredVariables().length;
    }; var _608hasDeclarations = null; return _fn})();

    Scope.prototype.declaredVariables = (function(){ var _fn = function _609declaredVariables() {
      var realVars, tempVars, v, _fn, _i, _len, _ref1;
      realVars = [];
      tempVars = [];
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    }; var _610declaredVariables = null; return _fn})();

    Scope.prototype.assignedVariables = (function(){ var _fn = function _611assignedVariables() {
      var v, _fn, _i, _len, _ref1, _results;
      _ref1 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type.assigned) {
          _results.push("" + v.name + " = " + v.type.value);
        }
      }
      return _results;
    }; var _612assignedVariables = null; return _fn})();

    return Scope;

  })();

}).call(this);
