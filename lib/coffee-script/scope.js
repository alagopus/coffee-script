// Generated by CoffeeScript 1.5.0-pre
(function() {
  var Scope, extend, last, _ref;

  _ref = require('./helpers'), extend = _ref.extend, last = _ref.last;

  exports.Scope = Scope = (function() {

    Scope.root = null;

    function Scope(parent, expressions, method) {
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.variables = [
        {
          name: 'arguments',
          type: 'arguments'
        }
      ];
      this.positions = {};
      if (!this.parent) {
        Scope.root = this;
      }
    }

    Scope.prototype.add = (function(){ function _add(name, type, immediate) {
      var _add;
      if (this.shared && !immediate) {
        return this.parent.add(name, type, immediate);
      }
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
        return this.variables[this.positions[name]].type = type;
      } else {
        return this.positions[name] = this.variables.push({
          name: name,
          type: type
        }) - 1;
      }
    }; return _add})();

    Scope.prototype.namedMethod = (function(){ function _namedMethod() {
      var _namedMethod;
      if (this.method.name || !this.parent) {
        return this.method;
      }
      return this.parent.namedMethod();
    }; return _namedMethod})();

    Scope.prototype.find = (function(){ function _find(name) {
      var _find;
      if (this.check(name)) {
        return true;
      }
      this.add(name, 'var');
      return false;
    }; return _find})();

    Scope.prototype.parameter = (function(){ function _parameter(name) {
      var _parameter;
      if (this.shared && this.parent.check(name, true)) {
        return;
      }
      return this.add(name, 'param');
    }; return _parameter})();

    Scope.prototype.check = (function(){ function _check(name) {
      var _check, _ref1;
      return !!(this.type(name) || ((_ref1 = this.parent) != null ? _ref1.check(name) : void 0));
    }; return _check})();

    Scope.prototype.temporary = (function(){ function _temporary(name, index) {
      var _temporary;
      if (name.length > 1) {
        return '_' + name + (index > 1 ? index - 1 : '');
      } else {
        return '_' + (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
      }
    }; return _temporary})();

    Scope.prototype.type = (function(){ function _type(name) {
      var v, _i, _len, _ref1, _type;
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.name === name) {
          return v.type;
        }
      }
      return null;
    }; return _type})();

    Scope.prototype.freeVariable = (function(){ function _freeVariable(name, reserve) {
      var index, temp, _freeVariable;
      if (reserve == null) {
        reserve = true;
      }
      index = 0;
      while (this.check((temp = this.temporary(name, index)))) {
        index++;
      }
      if (reserve) {
        this.add(temp, 'var', true);
      }
      return temp;
    }; return _freeVariable})();

    Scope.prototype.assign = (function(){ function _assign(name, value) {
      var _assign;
      this.add(name, {
        value: value,
        assigned: true
      }, true);
      return this.hasAssignments = true;
    }; return _assign})();

    Scope.prototype.hasDeclarations = (function(){ function _hasDeclarations() {
      var _hasDeclarations;
      return !!this.declaredVariables().length;
    }; return _hasDeclarations})();

    Scope.prototype.declaredVariables = (function(){ function _declaredVariables() {
      var realVars, tempVars, v, _declaredVariables, _i, _len, _ref1;
      realVars = [];
      tempVars = [];
      _ref1 = this.variables;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type === 'var') {
          (v.name.charAt(0) === '_' ? tempVars : realVars).push(v.name);
        }
      }
      return realVars.sort().concat(tempVars.sort());
    }; return _declaredVariables})();

    Scope.prototype.assignedVariables = (function(){ function _assignedVariables() {
      var v, _assignedVariables, _i, _len, _ref1, _results;
      _ref1 = this.variables;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.type.assigned) {
          _results.push("" + v.name + " = " + v.type.value);
        }
      }
      return _results;
    }; return _assignedVariables})();

    return Scope;

  })();

}).call(this);
