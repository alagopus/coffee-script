(function() {
  var binary, decodeChars, encodeChars, len;

  encodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  decodeChars = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];

  binary = require("binary");

  exports.encode = (function(){ function _encode(str) {
    var c1, c2, c3, i, length, out, _encode;
    length = len(str);
    i = 0;
    out = [];
    while (i < length) {
      c1 = str.charCodeAt(i++) & 0xff;
      if (i === length) {
        out.push(encodeChars.charCodeAt(c1 >> 2));
        out.push(encodeChars.charCodeAt((c1 & 0x3) << 4));
        out.push("=".charCodeAt(0));
        out.push("=".charCodeAt(0));
        break;
      }
      c2 = str.charCodeAt(i++);
      if (i === length) {
        out.push(encodeChars.charCodeAt(c1 >> 2));
        out.push(encodeChars.charCodeAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4)));
        out.push(encodeChars.charCodeAt((c2 & 0xF) << 2));
        out.push("=".charCodeAt(0));
        break;
      }
      c3 = str.charCodeAt(i++);
      out.push(encodeChars.charCodeAt(c1 >> 2));
      out.push(encodeChars.charCodeAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4)));
      out.push(encodeChars.charCodeAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6)));
      out.push(encodeChars.charCodeAt(c3 & 0x3F));
    }
    return binary.ByteString(out).toString("ascii");
  }; return _encode})();

  exports.decode = (function(){ function _decode(str) {
    var c1, c2, c3, c4, i, length, out, _decode;
    length = len(str);
    i = 0;
    out = [];
    while (i < length) {
      while (true) {
        c1 = decodeChars[str.charCodeAt(i++) & 0xff];
        if (!(i < length && c1 === -1)) {
          break;
        }
      }
      if (c1 === -1) {
        break;
      }
      while (true) {
        c2 = decodeChars[str.charCodeAt(i++) & 0xff];
        if (!(i < length && c2 === -1)) {
          break;
        }
      }
      if (c2 === -1) {
        break;
      }
      out.push(String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4)));
      while (true) {
        c3 = str.charCodeAt(i++) & 0xff;
        if (c3 === 61) {
          return out.join("");
        }
        c3 = decodeChars[c3];
        if (!(i < length && c3 === -1)) {
          break;
        }
      }
      if (c3 === -1) {
        break;
      }
      out.push(String.fromCharCode(((c2 & 0xF) << 4) | ((c3 & 0x3C) >> 2)));
      while (true) {
        c4 = str.charCodeAt(i++) & 0xff;
        if (c4 === 61) {
          return out.join("");
        }
        c4 = decodeChars[c4];
        if (!(i < length && c4 === -1)) {
          break;
        }
      }
      if (c4 === -1) {
        break;
      }
      out.push(String.fromCharCode(((c3 & 0x03) << 6) | c4));
    }
    return out.join("");
  }; return _decode})();

  len = (function(){ function _len(object) {
    var _len;
    if (object.length !== undefined) {
      return object.length;
    } else if (object.getLength !== undefined) {
      return object.getLength();
    } else {
      return undefined;
    }
  }; return _len})();

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
