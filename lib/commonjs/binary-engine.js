(function() {
  var wrapper;

  wrapper = (function(){ function _wrapper(that) {
    var obj, _wrapper;
    obj = new JavaAdapter(Packages.org.mozilla.javascript.ScriptableObject, Packages.org.mozilla.javascript.Wrapper, {
      get: (function(){ function _get(index, start) {
        var _get;
        if (typeof index === "number") {
          return that.get(index);
        }
        return that[index];
      }; return _get})(),
      has: (function(){ function _has(index, start) {
        var _has;
        if (typeof index === "number") {
          return index < that._length;
        }
        return that[index] !== undefined;
      }; return _has})(),
      put: (function(){ function _put(index, start, value) {
        var _put;
        if (typeof index === "number") {
          return that.set(index, value);
        } else {
          return that[index] = value;
        }
      }; return _put})(),
      unwrap: (function(){ function _unwrap() {
        var bytes, _unwrap;
        bytes = Packages.java.lang.reflect.Array.newInstance(Packages.java.lang.Byte.TYPE, that._length);
        Packages.java.lang.System.arraycopy(that._bytes, that._offset, bytes, 0, that._length);
        return bytes;
      }; return _unwrap})()
    });
    obj.__proto__ = that;
    return obj;
  }; return _wrapper})();

  exports.B_LENGTH = (function(){ function _B_LENGTH(bytes) {
    var _B_LENGTH;
    return bytes.length;
  }; return _B_LENGTH})();

  exports.B_ALLOC = (function(){ function _B_ALLOC(length) {
    var _B_ALLOC;
    return Packages.java.lang.reflect.Array.newInstance(Packages.java.lang.Byte.TYPE, length);
  }; return _B_ALLOC})();

  exports.B_FILL = (function(){ function _B_FILL(bytes, length, offset, value) {
    var _B_FILL;
    return Packages.java.util.Arrays.fill(bytes, length, offset, value);
  }; return _B_FILL})();

  exports.B_COPY = (function(){ function _B_COPY(src, srcOffset, dst, dstOffset, length) {
    var _B_COPY;
    return Packages.java.lang.System.arraycopy(src, srcOffset, dst, dstOffset, length);
  }; return _B_COPY})();

  exports.B_GET = (function(){ function _B_GET(bytes, index) {
    var _B_GET;
    return (bytes[index] >>> 0) & 0xFF;
  }; return _B_GET})();

  exports.B_SET = (function(){ function _B_SET(bytes, index, value) {
    var _B_SET;
    return bytes[index] = (value & 0x80 ? -1 - (value ^ 0xFF) : value);
  }; return _B_SET})();

  exports.B_DECODE = (function(){ function _B_DECODE(bytes, offset, length, codec) {
    var _B_DECODE;
    return String(new Packages.java.lang.String(bytes, offset, length, codec));
  }; return _B_DECODE})();

  exports.B_DECODE_DEFAULT = (function(){ function _B_DECODE_DEFAULT(bytes, offset, length) {
    var _B_DECODE_DEFAULT;
    return String(new Packages.java.lang.String(bytes, offset, length, "UTF-8"));
  }; return _B_DECODE_DEFAULT})();

  exports.B_ENCODE = (function(){ function _B_ENCODE(string, codec) {
    var _B_ENCODE;
    return new Packages.java.lang.String(string).getBytes(codec);
  }; return _B_ENCODE})();

  exports.B_ENCODE_DEFAULT = (function(){ function _B_ENCODE_DEFAULT(string) {
    var _B_ENCODE_DEFAULT;
    return new Packages.java.lang.String(string).getBytes("UTF-8");
  }; return _B_ENCODE_DEFAULT})();

  exports.B_TRANSCODE = (function(){ function _B_TRANSCODE(bytes, offset, length, sourceCodec, targetCodec) {
    var _B_TRANSCODE;
    return new Packages.java.lang.String(bytes, offset, length, sourceCodec).getBytes(targetCodec);
  }; return _B_TRANSCODE})();

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
