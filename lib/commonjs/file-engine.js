// Generated by CoffeeScript 1.6.1
(function() {
  var IO, JavaPath, copyForLink, exports, javaPopen, javaRuntime;

  exports = require("./file");

  IO = require("./io").IO;

  javaRuntime = function() {
    return Packages.java.lang.Runtime.getRuntime();
  };

  javaPopen = function(command) {
    return javaRuntime().exec(command);
  };

  exports.FileIO = function(path, mode, permissions) {
    var append, read, update, write, _ref;
    path = JavaPath(path);
    _ref = exports.mode(mode), update = _ref.update, append = _ref.append, write = _ref.write, read = _ref.read;
    if (update) {
      throw new Error("Updating IO not yet implemented.");
    } else if (write || append) {
      return new IO(null, new Packages.java.io.FileOutputStream(path, append));
    } else if (read) {
      return new IO(new Packages.java.io.FileInputStream(path), null);
    } else {
      throw new Error("Files must be opened either for read, write, or update mode.");
    }
  };

  exports.cwd = function() {
    return String(Packages.java.lang.System.getProperty("user.dir"));
  };

  JavaPath = function(path) {
    return new java.io.File(String(path) || ".");
  };

  exports.canonical = function(path) {
    return String(JavaPath(path).getCanonicalPath());
  };

  exports.mtime = function(path) {
    var lastModified;
    path = JavaPath(path);
    lastModified = path.lastModified();
    if (lastModified === 0) {
      return undefined;
    } else {
      return new Date(lastModified);
    }
  };

  exports.size = function(path) {
    path = JavaPath(path);
    return path.length();
  };

  exports.stat = function(path) {
    path = JavaPath(path);
    return {
      mtime: exports.mtime(path),
      size: exports.size(path)
    };
  };

  exports.exists = function(path) {
    try {
      return JavaPath(path).exists();
    } catch (_error) {}
    return false;
  };

  exports.linkExists = function(path) {
    return exports.isLink(path) || exports.exists(path);
  };

  exports.isDirectory = function(path) {
    try {
      return JavaPath(path).isDirectory();
    } catch (_error) {}
    return false;
  };

  exports.isFile = function(path) {
    try {
      return JavaPath(path).isFile();
    } catch (_error) {}
    return false;
  };

  exports.isAbsolute = function(path) {
    return new java.io.File(path).isAbsolute();
  };

  exports.isLink = function(path) {
    var absolute, canonical;
    if (java.io.File.separator === "\\") {
      return false;
    }
    path = exports.path(path);
    canonical = path.canonical().toString();
    absolute = path.absolute().toString();
    return absolute !== canonical;
  };

  exports.isReadable = function(path) {
    return JavaPath(path).canRead();
  };

  exports.isWritable = function(path) {
    return JavaPath(path).canWrite();
  };

  copyForLink = function(source, target) {
    var sourceStream, targetStream;
    sourceStream = exports.FileIO(source, {
      read: true
    });
    try {
      targetStream = exports.FileIO(target, {
        write: true
      });
      try {
        return sourceStream.copy(targetStream);
      } finally {
        targetStream.close();
      }
    } finally {
      sourceStream.close();
    }
  };

  exports.rename = function(source, target) {
    source = exports.path(source);
    target = source.resolve(target);
    source = JavaPath(source);
    target = JavaPath(target);
    if (!source.renameTo(target)) {
      throw new Error("failed to rename " + source + " to " + target);
    }
  };

  exports.move = function(source, target) {
    source = exports.path(source);
    target = exports.path(target);
    source = JavaPath(source);
    target = JavaPath(target);
    if (!source.renameTo(target)) {
      throw new Error("failed to rename " + source + " to " + target);
    }
  };

  exports.remove = function(path) {
    if (!JavaPath(path)["delete"]()) {
      throw new Error("failed to delete " + path);
    }
  };

  exports.mkdir = function(path) {
    if (!JavaPath(path).mkdir()) {
      throw new Error("failed to make directory " + path);
    }
  };

  exports.mkdirs = function(path) {
    JavaPath(path).mkdirs();
    if (!exports.isDirectory(path)) {
      throw new Error("failed to make directories leading to " + path);
    }
  };

  exports.rmdir = function(path) {
    if (!JavaPath(String(path))["delete"]()) {
      throw new Error("failed to remove the directory " + path);
    }
  };

  exports.list = function(path) {
    var i, listing, paths;
    path = JavaPath(String(path));
    listing = path.list();
    if (!(listing instanceof Array)) {
      throw new Error("no such directory: " + path);
    }
    paths = [];
    i = 0;
    while (i < listing.length) {
      paths[i] = String(listing[i]);
      i++;
    }
    return paths;
  };

  exports.touch = function(path, mtime) {
    if (mtime === undefined || mtime === null) {
      mtime = new Date();
    }
    path = JavaPath(path);
    path.createNewFile();
    if (!path.setLastModified(mtime.getTime())) {
      throw new Error("unable to set mtime of " + path + " to " + mtime);
    }
  };

}).call(this);
