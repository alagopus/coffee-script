// Generated by CoffeeScript 1.5.0-pre
(function() {
  var B_COPY, ByteArray, ByteString, IO, engine, name,
    __slice = [].slice;

  engine = require("io-engine");

  ByteString = require("binary").ByteString;

  ByteArray = require("binary").ByteArray;

  B_COPY = require("binary").B_COPY;

  for (name in engine) {
    if (Object.prototype.hasOwnProperty.call(engine, name)) {
      exports[name] = engine[name];
    }
  }

  IO = exports.IO;

  IO.prototype.readChunk = IO.prototype.readChunk || function(length) {
    var buffer, readLength;
    if (typeof length !== "number") {
      length = 1024;
    }
    buffer = new ByteArray(length);
    readLength = this.readInto(buffer, length, 0);
    if (readLength <= 0) {
      return new ByteString();
    }
    return new ByteString(buffer._bytes, 0, readLength);
  };

  IO.prototype.read = IO.prototype.read || function(length) {
    var b, buffer, buffers, copied, dest, i, len, total;
    if (length !== undefined) {
      return this.readChunk(length);
    }
    buffers = [];
    total = 0;
    while (true) {
      buffer = this.readChunk();
      if (buffer.length > 0) {
        buffers.push(buffer);
        total += buffer.length;
      } else {
        break;
      }
    }
    buffer = new ByteArray(total);
    dest = buffer._bytes;
    copied = 0;
    i = 0;
    while (i < buffers.length) {
      b = buffers[i];
      len = b.length;
      B_COPY(b._bytes, b._offset, dest, copied, len);
      copied += len;
      i++;
    }
    return new ByteString(dest, 0, copied);
  };

  IO.prototype.write = IO.prototype.write || function(object, charset) {
    var binary;
    if (object === null || object === undefined || typeof object.toByteString !== "function") {
      throw new Error("Argument to IO.write must have toByteString() method");
    }
    binary = object.toByteString(charset);
    this.writeInto(binary, 0, binary.length);
    return this;
  };

  IO.prototype.puts = (function(){ function _puts() {
    var args, _puts;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.write((args.length === 0 ? "\n" : Array.prototype.join.apply(args, ["\n"]) + "\n"));
  }; return _puts})();

  exports.Peekable = (function(){ function _Peekable(input) {
    var _Peekable;
    this._input = input;
    return this._buffer = new exports.StringIO();
  }; return _Peekable})();

  exports.Peekable.prototype.read = (function(){ function _read(length) {
    var _read;
    if (length == null) {
      return this._buffer.read() + this._input.read();
    } else if (this._buffer.length) {
      return this._buffer.read(length);
    } else {
      return this._input.read(length);
    }
  }; return _read})();

  exports.Peekable.prototype.peek = (function(){ function _peek(length) {
    var read, _peek;
    while (this._buffer.length < length) {
      read = this._input.read(length - this._buffer.length);
      if (!read.length) {
        break;
      }
      this._buffer.write(read);
    }
    return this._buffer.substring(0, length);
  }; return _peek})();

}).call(this);
